<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <!--transactionManager两个属性,JDBC(依赖JDBC实现业务管理) MANAGED(Mybatis本身不进行事务管理,将事务交由Mybatis之外的框架进行管理)-->
            <dataSource type="POOLED"> <!--连接池(开发测试经常使用)-->
                <property name="driver" value="org.sqlite.JDBC"/> <!--驱动-->
                <property name="url" value="jdbc:sqlite:D:\\桌面\\Web程序开发\\实验六  JSP+JDBC开发\\bookstore.db"/>
                <!--数据源url(本地.db文件即为路径)-->
                <!--                <property name="username" value="${username}"/>-->
                <!--                <property name="password" value="${password}"/>-->
            </dataSource>
        </environment>
    </environments>
</configuration>

<!--使用注解配置-->
<!--只要配置数据库链接方式,不需要指定文件的扫描路径-->

<!--
    <configuration> 配置
        <properties></propgerties> 属性
        <settrings></settings> 设置
        <typeAliases></typeAliases> 类型别名
        <typeHandlers></typeHandlers> 类型处理器
        <objectFactory></objectFactory> 对象工厂
        <plugins></plugins> 插件
        <environments> 环境配置
            <environment> 环境变量
                <transactionMapper /> 事务管理器 (属性type="JDBC")
                <dataSource /> 数据源
            </environment>
        </environments> 
        <databaseIdProvider></databaseIdProvider> 数据库厂商标识
        <mappers> 映射器
            <mapper />
        </mappers>
    </configuration>

    properties:
        可在外部配置也可动态替换,配置好的属性可以在整个配置文件动态替换 ${propertyName}
        外部:    SqlSessionFactoryBuilder().build(propertyValue);
        MyBatis加载属性顺序:
            properties元素体内 -> properties的 resource属性指定文件/url属性指定文件 -> 读取作为方法参数传回的属性
            (以上三种后者会覆盖前者同名属性)
        !:在占位符处指定一个默认值(默认关闭):
        <properties>
            <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        </properties>
        使用:
            <property name="name" value="${name:default_name}"/>
        !!:若属性名中设置了 ':' 或SQL映射中需要使用 ':' 就需要设置特定属性修改分隔属性名和默认值的字符:
            <properties resource="org/mybatis/example/config.properties">
                <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
            </properties>
        这样分隔符便改为了 '?:'
    
    Settings:
        极为重要的调整位置,其将改变MyBaties的运行行为

设置名                                  描述	                                                            有效值	    默认值
cacheEnabled	                    全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。	             true | false	true
lazyLoadingEnabled	                延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 
                                    特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。	         true | false	false
aggressiveLazyLoading	            开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 
                                    否则，每个延迟加载属性会按需加载(参考 lazyLoadTriggerMethods)。	        true | false	false （在 3.4.1 及之前的版本中默认为 true）
multipleResultSetsEnabled	        是否允许单个语句返回多结果集(需要数据库驱动支持)。	                    true | false	true
useColumnLabel	                    使用列标签代替列名。实际表现依赖于数据库驱动，具体可参
                                    考数据库驱动的相关文档，或通过对比测试来观察。	                        true | false	true
useGeneratedKeys	                允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，
                                    将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，
                                    但仍可正常工作（如 Derby）。	                                      true | false	False
autoMappingBehavior	                指定 MyBatis 应如何自动映射列到字段或属性。 
                                        NONE 表示关闭自动映射；
                                        PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 
                                        FULL 会自动映射任何复杂的结果集（无论是否嵌套）。	                NONE, PARTIAL, FULL	PARTIAL
autoMappingUnknownColumnBehavior	指定发现自动映射目标未知列（或未知属性类型）的行为。
                                        NONE: 不做任何反应
                                        WARNING: 输出警告日志('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARNING)
                                        FAILING: 映射失败 (抛出 SqlSessionException)
                                                                                                        NONE, WARNING, FAILING	NONE
defaultExecutorType	                配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理
                                    语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。	SIMPLE REUSE BATCH	SIMPLE
defaultStatementTimeout	            设置超时时间，它决定数据库驱动等待数据库响应的秒数。	                任意正整数	    未设置 (null)
defaultFetchSize	                为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在
                                    查询设置中被覆盖。	                                                 任意正整数	     未设置 (null)
defaultResultSetType	            指定语句默认的滚动策略。（新增于 3.5.2）	FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）	未设置 (null)
safeRowBoundsEnabled	            是否允许在嵌套语句中使用分页（RowBounds）。
                                    如果允许使用则设置为 false。	                                    true | false	False
safeResultHandlerEnabled	        是否允许在嵌套语句中使用结果处理器（ResultHandler）。
                                    如果允许使用则设置为 false。	                                    true | false	True
mapUnderscoreToCamelCase	        是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到
                                    经典 Java 属性名 aColumn。	                                        true | false	False
localCacheScope	MyBatis             利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 
                                        默认值为 SESSION，会缓存一个会话中执行的所有查询。 
                                        若设置值为 STATEMENT，本地缓存将仅用于执行语句，
                                            对相同 SqlSession 的不同查询将不会进行缓存。	            SESSION | STATEMENT	SESSION
jdbcTypeForNull	                    当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 
                                    某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，
                                    比如 NULL、VARCHAR 或 OTHER。	                        JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。	OTHER
lazyLoadTriggerMethods	            指定对象的哪些方法触发一次延迟加载。	                    用逗号分隔的方法列表。	equals,clone,hashCode,toString
defaultScriptingLanguage	        指定动态 SQL 生成使用的默认脚本语言。	                一个类型别名或全限定类名。	org.apache.ibatis.scripting.xmltags.XMLLanguageDriver
defaultEnumTypeHandler	            指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）	    一个类型别名或全限定类名。	org.apache.ibatis.type.EnumTypeHandler
callSettersOnNulls	                指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，
                                    这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。
                                    注意基本类型（int、boolean 等）是不能设置成 null 的。	                true | false	false
returnInstanceForEmptyRow	        当返回行的所有列都是空时，MyBatis默认返回 null。 
                                    当开启这个设置时，MyBatis会返回一个空实例。 
                                    请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）	      true | false	  false
logPrefix	                        指定 MyBatis 增加到日志名称的前缀。	                                    任何字符串	    未设置
logImpl	                            指定 MyBatis 所用日志的具体实现，未指定时将自动查找。	SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING	未设置
proxyFactory	                    指定 Mybatis 创建可延迟加载对象所用到的代理工具。	    CGLIB | JAVASSIST	            JAVASSIST （MyBatis 3.3 以上）
vfsImpl	                            指定 VFS 的实现	自定义 VFS 的实现的类全限定名，                         以逗号分隔。	未设置
useActualParamName	                允许使用方法签名中的名称作为语句参数名称。 
                                    为了使用该特性，你的项目必须采用 Java 8 编译，
                                    并且加上 -parameters 选项。（新增于 3.4.1）	                            true | false	true
configurationFactory	            指定一个提供 Configuration 实例的类。 
                                    这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 
                                    这个类必须包含一个签名为static Configuration getConfiguration() 
                                    的方法。（新增于 3.2.3）	                                一个类型别名或完全限定类名。	未设置
shrinkWhitespacesInSql	            从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 
                                        (新增于 3.5.5)	                                                    true | false	false
defaultSqlProviderType	            Specifies an sql provider class that holds provider method  
                                    (Since 3.5.6). This class apply to the type(or value) attribute 
                                    on sql provider annotation(e.g. @SelectProvider), when these attribute 
                                    was omitted.	                                        A type alias or fully qualified class name	    Not set

        写法:
            <settings>
                <setrring name="cacheEnable" value="true" />
            </settings>

    typeAliases(类型别名):
        为Java类型设置别名,仅在XML配置中使用.
        写法:
            <typeAliases>
                <type alias="别名" type="完整类名" />
            </typeAliases>
        也可指定一个包名,MyBatis将在指定包下搜索需要的JavaBean,若其JavaBean使用了注解 @Alias("别名") 别名便为其注解名
            若未设置注解,则将使用 Bean 的首字母小写的非限定类名作为别名.
            e.g. 
                <typeAliases>
                    <package name="domain.xxx" />
                </typeAliases>

            该包下:            
            @Alias("author")
            public class AuthorName {
                ...
            }
            别名为author

            public class BookName {

            }
            别名为bookName

        MyBatis中也内建了一些常用的Java类型别名(不区分大小写)
    
    typeHandlers(类型处理器):
        处理枚举类型:从EnumTypeHandler 或 EnumOrdinaTypeHandler中之一处理
    
    objectFactory(对象工厂):
        重写objectFactory需要继承DefaultObjectFactory类

    plugins(插件):
        拦截调用映射语句执行过程中的某一点
        实现Interceptor接口并指定想要拦截的方法签名

    environments(环境配置):
        可以配置多个环境,但是每一个SqlSessionFactory实例只能选择一种环境
        所以需要连接多个数据库就需要创建多个SqlSessionFactory实例,每个数据库对应一个

        <environments default="development">
            <environment id="development">
                <transactionManager type="JDBC">
                    <property name="..." value="..."/>
                </transactionManager>
                <dataSource type="POOLED">
                    <property name="driver" value="${driver}"/>
                    <property name="url" value="${url}"/>
                    <property name="username" value="${username}"/>
                    <property name="password" value="${password}"/>
                </dataSource>
            </environment>
        </environments>

        为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。
            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);
            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);
        如果忽略了环境参数，那么将会加载默认环境.
            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, properties);

        dataSource:
            type POOLED UNPOOLED JNDI
                UNPOOLED:没有必要使用连接池时,很适合.
                    包含属性:
                        driver:
                        url:
                        username:
                        password:
                        defaultTransactionIsolationLevel:默认链接事务隔离级别
                        defaultNetworkTimeout:等待数据库操作完成的默认网络超时时间(ms)
                        可选项:
                            可以传递属性给数据库驱动(属性名前加上 'driver.'前缀即可)
                                通过DriverManager.getConnection(url, dirverProperties)方法传递
                POOLED:
                    最常用,能使并发Web应用快速响应请求
                    包含属性:
                        driver:
                        url:
                        password:
                        username:
                        password:
                        defaultTransactiobIsolationLeve:
                        defaultNetworkTimeout:
                        poolMaximumActiveConnections:在任意时间可存在的活动链接数(默认:10)
                        poolMaximumIdleConnections:任意时间可能存在的空闲连接数.
                        poolMaximumCheckoutTime:被强制返回之前,池中链接被检出的时间(默认:20000ms/20s)
                        poolTimeToWait:长时间获取链接打印状态日志并重新获取链接的时间(默认:20000ms/20s)
                        poolMaximumLocalBadConnectionTolerance:坏链接容忍度(作用于每一个尝试从缓存池获得链接的!!线程!!)
                                如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，
                                但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和.
                                (默认:3)
                        poolPingQuery:侦测查询,检测连接是否正常工作并准备接受请求.(默认:NO PING QUERY SET 将会导致多个数据库出错时返回恰当的错误信息)
                        poolPingEnabled:是否启用侦测查询.若开启需要设置 poolPingQuery 属性为一个可执行的SQL语句(默认:false)
                        poolPingConnectionsNotUsedFor:配置poolPingQuery的频率.(可设置为和数据库链接超时时间一样,避免不必要的侦测)(默认:0)

    databaseIdProvider:
        MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
        MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 
        为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：
            <databaseIdProvider type="DB_VENDOR" />

    mappers:
        寻找定义的SQL映射语句.
            resource:  使用相对于类路径的资源引用
            url:       使用URL(包括:file:///形式的URL)
            class:     使用映射器接口实现类的完全限定类名
            name:      将包内的映射器接口实现全部注册为映射器
            
-->         