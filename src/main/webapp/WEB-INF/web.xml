<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    display-name 标注该Web项目的名字 -->
    <display-name>Servlet</display-name>
    <context-param>
        <param-name>javax.faces.CONFIG_FILES</param-name>
        <param-value>/mybatis-config-annotation.xml</param-value>
    </context-param>
    <!--    description 文本描述-->
    <description>Learn Servlet</description>
<!--    welcome-list-file 定义首页文件 -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
<!--    servlet 生命一个servlet的数据 -->
    <filter>
        <filter-name>filter_test</filter-name>
        <filter-class>com.example.servlet.FilterLearn</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>filter_test</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

    <servlet>
        <servlet-name>Gather_Information</servlet-name>
<!--    servlet-name 指定servlet的名称 -->
        <servlet-class>com.example.servlet.Gather_Information</servlet-class>
<!--    servlet-class 指定servlet的类名称 -->
<!--    jsp-file 指定web站台中的某个JSP网页的完整路径 ( '/' 开头)-->
<!--    init-param 定义初始化参数(可有多个, 且在servlet中通过ServletConfig对象传入init函数中, 可用 x.getInitParameter(String name)
        访问初始化参数.
        语法:
            <init-param>
                <param-name>string</param-name>
                <param-value>object</param-value>
            </init-param>
        Servlet内:
        public void init(ServletConfig config) throws ServletException {
            super(config);
            String str = config.getInitParameter("string");
        }
            -->
    </servlet>
<!--
        设置全局参数:(所有servlet都可使用)
            <context-param>
                <param-name>参数名</param-name>
                <param-value>参数值</param-value>
            </context-param>
        Servlet设置全局参数:
            ServletContext context = this.getServletContext();
            context.setAttribute("name",value);
            int maxNumberInContext = (int)context.getAttribute("maxNumber");
        Servlet获取全局参数:
            ServletContext application = this.getServletContext();
            application.getInitParameter("参数名");
        Servlet获取局部参数:
            this.getInitParameter("参数名");
        -->
    <servlet-mapping>
        <servlet-name>Gather_Information</servlet-name>
        <url-pattern>/gather</url-pattern>
        <url-pattern>/gather-inf</url-pattern>
    </servlet-mapping>
<!--    
        <servlet-mapping>
            定义servlet所对应的url
            包含属性:
                <servlet-name>
                <url-pattern> 指定servlet所对应的url
            拓:
                url-pattern 匹配规则:
                    优先级由高到低:
                    1. 精准匹配: 精准路线(绝对路径)(默认在项目名后添加匹配路径)
                    2. 通配符匹配: /* (/后所有都匹配)
                    3. 拓展名匹配: *.jsp *.html .do .action 等 (只看最后的拓展名)
                    4. 默认匹配: / (当之前的都不成功时
                (注:容器无法识别同时拥有两种匹配规则的pattern
                (一般不设置为 / 或 /* 因为如此设置整个项目的静态资源(非servlet)将无法访问)
    -->
    <servlet>
        <servlet-name>Judge</servlet-name>
        <servlet-class>com.example.servlet.Judge</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Judge</servlet-name>
        <url-pattern>/Judge</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>SelectOne_doGetApplication</servlet-name>
        <servlet-class>com.example.servlet.SelectOne_doGetApplication</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SelectOne_doGetApplication</servlet-name>
        <url-pattern>/SelectOne_doGetApplication</url-pattern>
    </servlet-mapping>
    
    <servlet>
        <servlet-name>LearnServlet</servlet-name>
        <servlet-class>com.example.servlet.LearnServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>LearnServlet</servlet-name>
        <url-pattern>/LearnServlet</url-pattern>
    </servlet-mapping>
    <!--
            <load-on-startup> 指定Web应用启动时装载Servlet的次序.
                值 >= 0 : 先加载小的,再加载大的
                值 < 0 | 未定义: Servlet容器将在Web客户首次访问这个Servlet时加载它
            <filter>
                过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联
            <listener>
                Listener元素指出事件监听程序类
            <session-config>
                配置会话超时,单位:分钟
            <error-page>
                返回特定http状态代码时或特定类型的异常被抛出时,制定将要显示的页面
                (即制作并控制显示错误代码页面
            -->


<!--    <resource-ref>-->
<!--        <description>MySQL数据库连接池</description>-->
<!--        <res-ref-name>jdbc/mysqlds</res-ref-name>-->
<!--        <res-type>javax.sql.DataSource</res-type>-->
<!--        <res-auth>Container</res-auth>-->
<!--        <res-sharing-scope>Shareable</res-sharing-scope>-->
<!--    </resource-ref>-->
</web-app>